<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title><%= title %></title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://unpkg.com/livekit-client/dist/livekit-client.umd.js"></script>
  <style>
    body { background: #f7f7f9; }
    .status { font-family: monospace; }
  </style>
</head>
<body>
  <div class="container py-4">
    <h3 class="mb-3">Agent2 Streaming Simulator</h3>
    <div class="mb-2 text-muted">LiveKit: <%= livekitUrl %></div>

    <div class="d-flex gap-2 flex-wrap mb-3">
      <button class="btn btn-primary" onclick="start('en')">Start (English)</button>
      <button class="btn btn-primary" onclick="start('fr')">Start (French)</button>
      <button class="btn btn-primary" onclick="start('de')">Start (German)</button>
      <button class="btn btn-primary" onclick="start('nl')">Start (Dutch)</button>
      <button class="btn btn-outline-secondary" onclick="stopAgent()">Stop Agent</button>
    </div>
    <div class="status" id="status">Idle</div>
    <audio id="audio-el"></audio>
  </div>

  <script>
    const LK = window.LivekitClient;
    let room;

    function setStatus(m){ document.getElementById('status').innerText = m; }

    async function start(lang){
      try {
        setStatus('Requesting mic...');
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        stream.getTracks().forEach(t=>t.stop());

        setStatus('Minting token and starting agent...');
        const uniqueRoom = 'agent2-' + Math.random().toString(36).slice(2,8);
        const resp = await fetch('/api/simulate/start', { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ room: uniqueRoom, lang })});
        const data = await resp.json();
        if (!data.ok) { setStatus('Failed: ' + (data.error||'unknown')); return; }

        const { token, url } = data;
        room = new LK.Room({ adaptiveStream:true, dynacast:true, disconnectOnPageLeave:true });
        room.on(LK.RoomEvent.Connected, ()=> setStatus('Connected; publishing mic...'));
        room.on(LK.RoomEvent.Disconnected, ()=> setStatus('Disconnected'));
        room.on(LK.RoomEvent.TrackSubscribed, (track, publication, participant)=>{
          try {
            const pid = String((participant && participant.identity) || '');
            if (track && track.kind === 'audio' && pid.startsWith('agent-')){
              const el = document.getElementById('audio-el');
              track.attach(el); el.play().catch(()=>{});
              setStatus(`Playing agent audio from ${pid}. Mic on. Speak to test latency.`);
            } else {
              console.log('Ignoring audio from participant', pid);
            }
          } catch (e) {
            console.error('attach audio failed', e);
          }
        });

        await room.connect(url, token);
        const localAudio = await LK.createLocalAudioTrack({ echoCancellation:true, noiseSuppression:true });
        await room.localParticipant.publishTrack(localAudio);
      } catch (e){
        console.error(e); setStatus('Error: ' + (e?.message||e));
      }
    }

    async function stopAgent(){
      try { await fetch('/api/agent/stop', { method:'POST' }); setStatus('Agent stop requested'); } catch {}
      try { if (room) { await room.disconnect(); room = null; } } catch {}
    }
  </script>
</body>
</html>
